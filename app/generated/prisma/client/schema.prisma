model assignment {
  assignment_id         Int                     @id @default(autoincrement())
  classroom_id          Int
  name                  String
  description           String?
  assignment_number     Int?
  due_date              DateTime                @db.Date
  created_at            DateTime?               @default(now()) @db.Timestamp(6)
  classroom             classroom               @relation(fields: [classroom_id], references: [classroom_id], onDelete: Cascade)
  assignment_submission assignment_submission[]
  question              question[]
}

model assignment_submission {
  assignment_submission_id Int                   @id @default(autoincrement())
  assignment_id            Int
  student_id               Int
  s3_path                  String
  submitted_at             DateTime?             @default(now()) @db.Timestamp(6)
  assignment               assignment            @relation(fields: [assignment_id], references: [assignment_id], onDelete: NoAction, onUpdate: NoAction)
  student                  student               @relation(fields: [student_id], references: [student_id], onDelete: NoAction, onUpdate: NoAction)
  question_submission      question_submission[]
}

model question {
  question_id              Int                   @id @default(autoincrement())
  assignment_id            Int
  question_number          Int?
  name                     String?
  prompt                   String?
  example_solution_s3_path String?
  accepted_file_types      String?
  created_at               DateTime?             @default(now()) @db.Timestamp(6)
  assignment               assignment            @relation(fields: [assignment_id], references: [assignment_id], onDelete: Cascade)
  question_submission      question_submission[]
}

model question_submission {
  question_submission_id   Int                   @id @default(autoincrement())
  assignment_submission_id Int
  question_id              Int
  student_id               Int
  s3_path                  String
  created_at               DateTime?             @default(now()) @db.Timestamp(6)
  assignment_submission    assignment_submission @relation(fields: [assignment_submission_id], references: [assignment_submission_id], onDelete: NoAction, onUpdate: NoAction)
  question                 question              @relation(fields: [question_id], references: [question_id], onDelete: NoAction, onUpdate: NoAction)
  student                  student               @relation(fields: [student_id], references: [student_id], onDelete: NoAction, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model classroom {
  classroom_id      Int                 @id @default(autoincrement())
  name              String
  description       String?
  created_at        DateTime            @default(now())
  updated_at        DateTime            @updatedAt
  student_classroom student_classroom[]
  teacher_classroom teacher_classroom[]
  assignment        assignment[]
}

model student {
  student_id            Int                     @id @default(autoincrement())
  user_id               Int                     @unique
  created_at            DateTime                @default(now())
  updated_at            DateTime                @updatedAt
  assignment_submission assignment_submission[]
  student_classroom     student_classroom[]
  question_submission   question_submission[]
  student_scholarship   student_scholarship[]
  user                  user                    @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
}

model student_classroom {
  student_classroom_id Int       @id @default(autoincrement())
  student_id           Int
  classroom_id         Int
  student              student   @relation(fields: [student_id], references: [student_id])
  classroom            classroom @relation(fields: [classroom_id], references: [classroom_id])
  created_at           DateTime  @default(now())
  updated_at           DateTime  @updatedAt

  @@unique([student_id, classroom_id])
}

model teacher {
  teacher_id        Int                 @id @default(autoincrement())
  user_id           Int                 @unique
  created_at        DateTime            @default(now())
  updated_at        DateTime            @updatedAt
  user              user                @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  teacher_classroom teacher_classroom[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model teacher_classroom {
  teacher_classrood_id Int       @id @default(autoincrement())
  teacher_id           Int
  classroom_id         Int
  teacher              teacher   @relation(fields: [teacher_id], references: [teacher_id])
  classroom            classroom @relation(fields: [classroom_id], references: [classroom_id])
  created_at           DateTime  @default(now())
  updated_at           DateTime  @updatedAt

  @@unique([teacher_id, classroom_id])
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters", "prismaSchemaFolder"]
  output          = "../../app/generated/prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model scholarship {
  scholarship_id      Int                   @id @default(autoincrement())
  name                String
  organization_id     Int
  award               String?
  description         String?
  category            String?
  eligibility         String?
  region              String?
  deadline            DateTime?             @db.Date
  fafsa               Boolean?              @default(false)
  gpa                 Decimal?              @db.Decimal(3, 2)
  created_at          DateTime?             @default(now()) @db.Timestamp(6)
  organization        organization          @relation(fields: [organization_id], references: [organization_id], onDelete: Cascade, onUpdate: NoAction)
  student_scholarship student_scholarship[]
}

model student_scholarship {
  student_scholarship_id Int         @id @default(autoincrement())
  student_id             Int
  scholarship_id         Int
  is_bookmarked          Boolean?    @default(false)
  scholarship            scholarship @relation(fields: [scholarship_id], references: [scholarship_id], onDelete: Cascade, onUpdate: NoAction)
  student                student     @relation(fields: [student_id], references: [student_id], onDelete: Cascade, onUpdate: NoAction)
}

model post {
  post_id   Int     @id @default(autoincrement())
  title     String
  content   String?
  published Boolean @default(false)
  author_id Int?
  author    user?   @relation(fields: [author_id], references: [user_id])
}

model user {
  user_id           Int                 @id @default(autoincrement())
  name              String?
  email             String              @unique
  role              UserRole            @default(GUEST)
  payment_info      String?
  invite_code       String?             @db.Uuid
  signup_complete   Boolean?
  created_at        DateTime?           @default(now()) @db.Timestamp(6)
  updated_at        DateTime?           @default(now()) @db.Timestamp(6)
  city              String?
  state             String?
  country           String?
  timezone          String?
  admin             admin?
  user_organization user_organization[]
  student           student?
  teacher           teacher?
  post              post[]
}

model admin {
  admin_id  Int      @id
  is_active Boolean?
  user_id   Int      @unique
  user      user     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
}

model organization {
  organization_id   Int                 @id @default(autoincrement())
  name              String?
  description       String?
  website           String?
  old_id            String?             @db.Uuid
  scholarship       scholarship[]
  user_organization user_organization[]
}

model user_organization {
  user_organization_id Int          @id @default(autoincrement())
  user_id              Int
  organization_id      Int
  organization         organization @relation(fields: [organization_id], references: [organization_id], onDelete: NoAction, onUpdate: NoAction)
  user                 user         @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
}

enum UserRole {
  ADMIN
  TEACHER
  STUDENT
  GUEST
}
